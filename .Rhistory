## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'm <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
cacheSolve( m )
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve( m )
cacheSolve( m )
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
cacheSolve( m )
## Returns a list of 4 function used to initialize a matrix object and retrieve it when required
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Calculates and caches the inverse of a function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
cacheSolve( m )
